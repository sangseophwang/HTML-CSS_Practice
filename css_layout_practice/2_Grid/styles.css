.grid {
  display: grid;
  gap: 5px;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(4, 100px);
  grid-auto-flow: row;
  grid-auto-rows: 100px;
  color: white;
  font-size: 20px;
}

.item:nth-child(odd) {
  background-color: green;
}

.item:nth-child(even) {
  background-color: tomato;
}

/*  grid-template-row 로 세로 크기를,
    grid-template-column으로 가로 크기를 조절할 수 있다.
    그리고 gap을 이용해 각 박스의 간격을 조정할 수 있다. */

/*  grid 반복을 할때는 repeat(개수, 크기) 로 작성하면 된다.
    그리고 grid-template-area로 얼마나 영역을 차지할지를 시각적으로
    제작할 수 있다. 그리고 grid-area로 각 클래스에 지정을 해줘야 이 기능이
    작동을 한다. 작성할 때는 문자열이 아닌 이름 그대로 적어야 한다. */

/*  grid-column-start / end , grid-row-start / end로
    각 영역을 '늘릴' 수 있다. 늘리는 기준은 line으로, 4개의 */

/*  위에 적었던 grid-column-start 이런 것들을 한번에 줄일 수 있다.
    grid-column: 시작 위치 / 끝 위치;  이렇게 적으면 된다. 
    그리고 마지막 위치까지 늘리기 위해 이전에는 5, 4 이렇게 위치를 파악해
    작성했는데, 그냥 -1을 쓰면 끝까지 늘어나게 된다.
    (전체 다 늘리는데) 이것도 귀찮으면 span을 쓰고 cell 개수를 쓰면 된다.*/

/*  grid line에 이름을 붙일 수 있다. '[이름] 크기' 이렇게 적으면 
    적용할 수 있다.  */

/*  grid-template로 더 간단하고 직관적으로 정렬할 수 있다. grid-area로
    이름을 지정한 뒤 얼마나 공간을 차지할 지 적어주고,  1fr(fraction) 이런
    식으로 적어주면 된다. */

/*  place-items로 grid의 위치를 조정할 수 있다. place-items: y축 x축
    place-content와 다른 점은 그리드 한개씩을 조정한다는 것이다. */

/*  grid에서 justify-content는 그리드 전체를 수평적으로 움직이는 것,
    align-content는 그리드 전체를 수직적으로 움직이는 것이다. 이 기능으로
    그리드 전체의 위치 조정을 할 수 있다. 그래서 'place-content: y축 x축'으로
    합쳐서 조작하면 된다.*/

/*  align-self와 justify-self는 하나의 grid를 조정할 때 쓴다. 
    이것도 place-self로 합쳐서 쓸 수 있다.*/

/*  grid를 추가로 만들다보면 repeat의 크기를 매번 수동으로 수정해줘야 한다.
    이런 피곤함을 없애기 위해 grid-auto-columns / grid-auto-rows를
    사용하면 나중에 추가될 때 자동으로 적용이 되도록 할 수 있다. */
